/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class apron_Texpr0Intern */

#ifndef _Included_apron_Texpr0Intern
#define _Included_apron_Texpr0Intern
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     apron_Texpr0Intern
 * Method:    init
 * Signature: (Lapron/Texpr0Node;)V
 */
JNIEXPORT void JNICALL Java_apron_Texpr0Intern_init__Lapron_Texpr0Node_2
  (JNIEnv *, jobject, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    init
 * Signature: (Lapron/Texpr0Intern;)V
 */
JNIEXPORT void JNICALL Java_apron_Texpr0Intern_init__Lapron_Texpr0Intern_2
  (JNIEnv *, jobject, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    init
 * Signature: (Lapron/Linexpr0;)V
 */
JNIEXPORT void JNICALL Java_apron_Texpr0Intern_init__Lapron_Linexpr0_2
  (JNIEnv *, jobject, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    finalize
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_apron_Texpr0Intern_finalize
  (JNIEnv *, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    class_init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_apron_Texpr0Intern_class_1init
  (JNIEnv *, jclass);

/*
 * Class:     apron_Texpr0Intern
 * Method:    toTexpr0Node
 * Signature: ()Lapron/Texpr0Node;
 */
JNIEXPORT jobject JNICALL Java_apron_Texpr0Intern_toTexpr0Node
  (JNIEnv *, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    getDepth
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_apron_Texpr0Intern_getDepth
  (JNIEnv *, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    getSize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_apron_Texpr0Intern_getSize
  (JNIEnv *, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    maxDim
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_apron_Texpr0Intern_maxDim
  (JNIEnv *, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    hasDim
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_apron_Texpr0Intern_hasDim
  (JNIEnv *, jobject, jint);

/*
 * Class:     apron_Texpr0Intern
 * Method:    getDims
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_apron_Texpr0Intern_getDims
  (JNIEnv *, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    isIntervalCst
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_apron_Texpr0Intern_isIntervalCst
  (JNIEnv *, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    isIntervalLinear
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_apron_Texpr0Intern_isIntervalLinear
  (JNIEnv *, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    isIntervalPolynomial
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_apron_Texpr0Intern_isIntervalPolynomial
  (JNIEnv *, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    isIntervalPolyfrac
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_apron_Texpr0Intern_isIntervalPolyfrac
  (JNIEnv *, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    isScalar
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_apron_Texpr0Intern_isScalar
  (JNIEnv *, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    substitute
 * Signature: (ILapron/Texpr0Intern;)V
 */
JNIEXPORT void JNICALL Java_apron_Texpr0Intern_substitute
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    addDimensions
 * Signature: (Lapron/Dimchange;)V
 */
JNIEXPORT void JNICALL Java_apron_Texpr0Intern_addDimensions
  (JNIEnv *, jobject, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    removeDimensions
 * Signature: (Lapron/Dimchange;)V
 */
JNIEXPORT void JNICALL Java_apron_Texpr0Intern_removeDimensions
  (JNIEnv *, jobject, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    permuteDimensions
 * Signature: (Lapron/Dimperm;)V
 */
JNIEXPORT void JNICALL Java_apron_Texpr0Intern_permuteDimensions
  (JNIEnv *, jobject, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    hashCode
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_apron_Texpr0Intern_hashCode
  (JNIEnv *, jobject);

/*
 * Class:     apron_Texpr0Intern
 * Method:    isEqual
 * Signature: (Lapron/Texpr0Intern;)Z
 */
JNIEXPORT jboolean JNICALL Java_apron_Texpr0Intern_isEqual
  (JNIEnv *, jobject, jobject);

#ifdef __cplusplus
}
#endif
#endif
